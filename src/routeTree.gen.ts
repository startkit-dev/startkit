/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from "@tanstack/react-start/server"

import { Route as rootRouteImport } from "./routes/__root"
import { Route as MainRouteImport } from "./routes/_main"
import { Route as AuthRouteImport } from "./routes/_auth"
import { Route as MainIndexRouteImport } from "./routes/_main/index"
import { Route as AuthLoginRouteImport } from "./routes/_auth/login"
import { ServerRoute as ApiPingServerRouteImport } from "./routes/api/ping"
import { ServerRoute as ApiAuthSplatServerRouteImport } from "./routes/api/auth/$"

const rootServerRouteImport = createServerRootRoute()

const MainRoute = MainRouteImport.update({
  id: "/_main",
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: "/_auth",
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => MainRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any)
const ApiPingServerRoute = ApiPingServerRouteImport.update({
  id: "/api/ping",
  path: "/api/ping",
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/login": typeof AuthLoginRoute
  "/": typeof MainIndexRoute
}
export interface FileRoutesByTo {
  "/login": typeof AuthLoginRoute
  "/": typeof MainIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/_auth": typeof AuthRouteWithChildren
  "/_main": typeof MainRouteWithChildren
  "/_auth/login": typeof AuthLoginRoute
  "/_main/": typeof MainIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/login" | "/"
  fileRoutesByTo: FileRoutesByTo
  to: "/login" | "/"
  id: "__root__" | "/_auth" | "/_main" | "/_auth/login" | "/_main/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  "/api/ping": typeof ApiPingServerRoute
  "/api/auth/$": typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  "/api/ping": typeof ApiPingServerRoute
  "/api/auth/$": typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  "/api/ping": typeof ApiPingServerRoute
  "/api/auth/$": typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: "/api/ping" | "/api/auth/$"
  fileServerRoutesByTo: FileServerRoutesByTo
  to: "/api/ping" | "/api/auth/$"
  id: "__root__" | "/api/ping" | "/api/auth/$"
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPingServerRoute: typeof ApiPingServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_main": {
      id: "/_main"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_auth": {
      id: "/_auth"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/_main/": {
      id: "/_main/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    "/_auth/login": {
      id: "/_auth/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}
declare module "@tanstack/react-start/server" {
  interface ServerFileRoutesByPath {
    "/api/ping": {
      id: "/api/ping"
      path: "/api/ping"
      fullPath: "/api/ping"
      preLoaderRoute: typeof ApiPingServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    "/api/auth/$": {
      id: "/api/auth/$"
      path: "/api/auth/$"
      fullPath: "/api/auth/$"
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRoute: MainIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPingServerRoute: ApiPingServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
